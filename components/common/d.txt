import { faChevronRight, faMobileAlt } from "@fortawesome/free-solid-svg-icons"
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome"
import Link from "next/link"
import { ReactNode, useState } from "react"
import { Button } from "react-bootstrap"

import { useCategories } from "@/hooks"

const DUMMY_ITEMS = [
    "New at Buzz",
    "Computers",
    "TVs",
    "Headphones, Speakers & Audios",
    "Smart Home",
    "Mobile Phone",
    "Gaming",
    "Movies & TV Shows",
    "Music & Vnyl",
    "Collectibles and Merchandise",
    "Home & Garden",
    "Books, Magazines & Music",
]

interface DropdownItemProps {
    items: string[]
    children?: ReactNode
    onClick?: () => void
}
interface DropdownProps {
    title: string
}

const DropdownItem = ({ items, children, onClick }: DropdownItemProps) => {
    return (
        <ul className="dropdown-menu-items">
            {items.map((item, key) => (
                <li onClick={onClick} className="dropdown-menu-item" key={key}>
                    <FontAwesomeIcon icon={faMobileAlt} />
                    <Link href={`/${item.toLowerCase()}`}>
                        <a className="dropdown-menu-item-link">{item}</a>
                    </Link>
                    <FontAwesomeIcon icon={faChevronRight} />
                </li>
            ))}
            {children && <>{children}</>}
        </ul>
    )
}

export const Dropdown = ({ title }: DropdownProps) => {
    const [opened, setOpened] = useState(false)
    const [secondaryOpened, setSecondaryOpened] = useState(false)
    const [tertiaryOpened, setTertiaryOpened] = useState(false)

    const toggleDropdown = () => setOpened(!opened)

    const closeAllDropdown = () => {
        setOpened(false)
        setSecondaryOpened(false)
        setTertiaryOpened(false)
    }

    return (
        <>
            {opened && (
                <div
                    role="button"
                    className="dropdown-menu-overlay"
                    onClick={closeAllDropdown}
                />
            )}
            <div className="dropdown-menu-container">
                <Button size="lg" onClick={toggleDropdown}>
                    Browse by Categories
                </Button>
                <div className="dropdowns">
                    {opened && (
                        <DropdownItem
                            onClick={() => setSecondaryOpened(!secondaryOpened)}
                            items={DUMMY_ITEMS}
                        />
                    )}
                    {opened && secondaryOpened && (
                        <DropdownItem
                            items={DUMMY_ITEMS}
                            onClick={() => setTertiaryOpened(!tertiaryOpened)}
                        />
                    )}
                    {opened && secondaryOpened && tertiaryOpened && (
                        <DropdownItem items={DUMMY_ITEMS} />
                    )}
                </div>
            </div>
        </>
    )
}
// .dropdown-menu-overlay {
//     position: fixed;
//     top: 0;
//     left: 0;
//     width: 100%;
//     height: 100%;
//     background: rgba(0, 0, 0, 0.55);
// }
// .dropdowns {
//     position: absolute;
//     display: flex;
//     z-index: 10;
// }
// .dropdown-menu-container {
//     position: relative;
// }
// .dropdown-menu-items {
//     // position: absolute;
//     width: 100%;
//     min-width: 35rem;
//     padding: 25px 10px;
//     background-color: $white;

//     &:nth-of-type(2) {
//         border-left: 1px solid $tertiary-color;
//         border-right: 1px solid $tertiary-color;
//     }
//     &[data-is-nested="true"] {
//         transform: translateX(calc(100% - 10px)) translateY(calc(-100% + 25px));
//     }
// }
// .dropdown-menu-item {
//     display: flex;
//     align-items: center;
//     gap: 15px;
//     padding: 15px 20px;
//     border-radius: 4px;

//     &:hover {
//         background-color: $primary-color;
//         color: $white;
//     }
// }
// .dropdown-menu-item-link {
//     flex: 1;
//     color: currentColor;

//     &:hover {
//         color: currentColor;
//     }
// }
